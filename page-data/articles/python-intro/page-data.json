{"componentChunkName":"component---src-pages-articles-markdown-remark-frontmatter-slug-js","path":"/articles/python-intro/","result":{"data":{"markdownRemark":{"html":"<p>Welcome to your first steps into the world of Python programming! Python, often\nreferred to as the \"Swiss Army knife\" of programming languages is a great place\nto start learning how to code as it has a relatively steady learning curve, but\nis still heavily used in industry for real world applications - particularly in\nthe world of AI and data analysis!</p>\n<p>Today, we'll learn the fundamentals of Python, and use it to create generative\nart using <em>strange attractors</em> as in the case above. Don't worry if they seem\ncomplex - they're actually quite straightforward to create as some clever maths\ndoes the heavy lifting for us!</p>\n<h2>What is Python?</h2>\n<p>Python is a programming language; which is in turn a way computers take\ninstructions from us, interpret them and complete the tasks we give them. Python\nis an <em>object orientated langauge</em>, or <em>OOP</em>, which means almost everything in\nPython is defined as an <em>object</em>. For now - we can just think of objects as bits\nof information with specific properties.</p>\n<p>To get started with Python, I recommend using\n<a href=\"https://colab.research.google.com/\">Google's Colab notebooks</a>. This is a free\nresource Google provides to allow us to code Python in your web browser without\ninstalling Python on your computer - that way we can focus on learning the\nimportant bits without getting bogged down in tech support!</p>\n<p>When you open Google Colab, you'll be greeted with a number of options - you'll\nwant to ignore all these and click the \"New notebook\" button in the bottom right\nof the panel that comes up:</p>\n<p>You'll then be taken to an empty notebook - enter the following line of code\nbelow and press <code class=\"language-text\">SHIFT</code> + <code class=\"language-text\">ENTER</code> to run the cell:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You should see the words <code class=\"language-text\">Hello world!</code> come up below your code -\ncongratulations! You've just written your first line of code!</p>\n<h2>What did we just do?</h2>\n<p>There are two parts of the code we've just run:</p>\n<ul>\n<li>The <code class=\"language-text\">print()</code> function</li>\n<li>The text <code class=\"language-text\">\"Hello world!\"</code></li>\n</ul>\n<p><em>Functions</em> are bits of code that take a number of inputs (or <em>arguments</em>), do\nsomething with them, then output something. Eventually we'll look at ways we can\ncreate out own functions - but for now, just know that what the <code class=\"language-text\">print()</code>\nfunction does is take whatever we put in the input and show us what it is.</p>\n<p>The text we put into the function is called a <em>string</em> - strings are any bit of\ntext, like words, sentences or single letters. For Python to know we are talking\nabout text - we <em>must</em> surround the text with speech marks or apostrophies (<code class=\"language-text\">\"\"</code>\nor <code class=\"language-text\">''</code>) - otherwise Python doesn't know what we mean!</p>\n<p>So this piece of code takes our text and shows it to us. Not very helpful yet!</p>\n<h2>Getting Python to Remember things</h2>\n<p>One of the key first concepts in Python is the idea of <em>variables</em>. Say you have\na very large piece of text - for example a whole book - and you don't want to\nwrite it out each time. We can store anything in Python to a <em>variable</em> and use\nit later - for example look at the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"I am a very long piece of text...\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we save the string into a variable <code class=\"language-text\">a</code> and print it out.</p>\n<p>It's important to know that internally, variables are just the object they refer\nto - whenever Python <em>sees</em> the variable <code class=\"language-text\">a</code>, it <em>thinks</em> of the string it's\nassociated with.</p>\n<p>We can assign anything to a variable - for example numbers:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num_apples <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nnum_oranges <span class=\"token operator\">=</span> <span class=\"token number\">6</span></code></pre></div>\n<p><em>Note - you can name variables almost anything - so give them descriptive\nnames!</em></p>\n<p>We can then create a new variable based on the values of the previous two\nvariables:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num_fruits <span class=\"token operator\">=</span> num_apples <span class=\"token operator\">+</span> num_oranges\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num_fruits<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Remember that whenever Python sees the <code class=\"language-text\">num_apples</code> variable - it internally\nreplaces it with the current value of what is stored within.</p>\n<p>So far we have seen two different <em>types</em> of data - numbers and text. To check\nwhat type an object is - we can use the <code class=\"language-text\">type</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>num_fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice how we to use the <code class=\"language-text\">print()</code> function around the <code class=\"language-text\">type()</code> function to\nactually show us the type - this isn't strictly needed but good practice for\nreasons we'll see when looking at functions in more detail!</p>\n<p>There are a huge variety of types in Python, and we can actually define our own\nlater - but these types tell Python what an object is and what it can do. For\nexample, take addition; for numbers, it works exactly how we'd expect:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>We should get <code class=\"language-text\">8</code> - which is perfectly expected!</p>\n<p>What about if we try and add two strings?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We'll find that Python just joins these strings together!</p>\n<h2>Objects within Objects</h2>\n<p>An important type to be aware of in Python is the <code class=\"language-text\">list</code>, which is an object\nthat holds other objects. Lists can contain any number of types, and are handy\nfor storing a number of objects in a single entity that we can access later.\nFor example, take this list:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>This list has 5 elements - 4 numbers and a string - which we can count using the\n<code class=\"language-text\">len()</code> function (to return the <em>length</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we want to retrieve objects out of our list, we use a process called\n<em>indexing</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is a bit confusing - why do we get the number <code class=\"language-text\">4.5</code> and not <code class=\"language-text\">\"three\"</code>? Well\nPython starts counting from 0 - this is a bit odd but will start to make sense\nthe more you use it.</p>\n<h2>Importing Libraries</h2>\n<p>Python comes with a load of built in functions and objects, but sometimes we\nwant to do more complex tasks that might take us days to code ourselves. This is\nwhere <em>libraries</em> get involved - which are other people's code published in\npackages that we can use on demand to solve specific tasks. These tasks range\nfrom building complex deep learning AI models using <code class=\"language-text\">tensorflow</code> to controlling\nyour mouse and keyboard with <code class=\"language-text\">pyautogui</code>; but today we'll be using the\n<code class=\"language-text\">matplotlib</code> library to create some images.</p>\n<p>To import a library, we use the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib</code></pre></div>\n<p>Now if we want to use any of the <code class=\"language-text\">matplotlib</code> functions we would call them as\n<code class=\"language-text\">matplotlib.myfunction()</code> - however this is a bit long, and most the functions\nwe'll ever want to use are under the <code class=\"language-text\">matplotlib.pyplot</code> sublibrary; so it's\ncommon to import the library under a name using the command</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</code></pre></div>\n<p>Now whenever we want make a change to our plot we can use the command\n<code class=\"language-text\">plt.scatter()</code> instead of <code class=\"language-text\">matplotlib.pyplot.scatter()</code> - much easier!</p>\n<p>Now for example, we can use the following code to create a small graph of square\nnumbers:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">plt.show()</code> is the <code class=\"language-text\">matplotlib</code> equivalent to <code class=\"language-text\">print</code> in that it shows us\nwhatever the current plot is.</p>\n<p>We should see a little image come up with a series of points in the shape of a\ncurve; this is going to be the basis of making the images above!</p>\n<h2>Strange Attractors</h2>\n<p>Now let's take a bit of a detour into the world of <em>strange attractors</em> - these\nare sets of mathematical equations that create interesting, chaotic patterns\nbased on some chosen numbers. Perhaps the most straightforward attractor is the\nClifford attractor - if we take a point <code class=\"language-text\">(x, y)</code>, we get the next position <code class=\"language-text\">(v,\nw)</code> by using the formula:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">v = sin(ay) + c * cos(ax)\nw = sin(bx) + d * cos(by)</code></pre></div>\n<p>Where <code class=\"language-text\">a, b, c, d</code> are chosen by us. We can then repeat this process thousands\nof times and see what we get!</p>\n<h2>Loops</h2>\n<p>We <em>could</em> use the following code to get each new value for our strange attractor:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x_1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ny_1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nx_2 <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> y_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> c <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> x_1<span class=\"token punctuation\">)</span>\ny_2 <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> x_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> y_1<span class=\"token punctuation\">)</span>\n\nx_3 <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> y_2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> c <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> x_2<span class=\"token punctuation\">)</span>\ny_3 <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> x_2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> y_2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>However I think you'd soon go mad! Luckily, doing something repeatedly using\nPython is fairly straightforward using a loop. Loops allow Python to perform an\naction over and over again, stopping when something happens. One type of loop is\na <code class=\"language-text\">for</code> loop, where an action is carried out for each item in a list. For\nexample, the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Will print the values <code class=\"language-text\">\"one\"</code>, <code class=\"language-text\">\"two\"</code> and <code class=\"language-text\">\"three\"</code> in turn.</p>\n<p>Some important things about a for loop:</p>\n<ul>\n<li>The <code class=\"language-text\">for</code> keyword defines the start of a for loop</li>\n<li>Here, the <code class=\"language-text\">value</code> variable is a \"dummy variable\" that tells Python what do\nwith each element in the list - Python runs through the loop code each time\nreplacing the dummy variable with the corresponding value for that iteration</li>\n<li>The horizontal indent for the <code class=\"language-text\">print()</code> function tells Python that the code is\nincluded in the loop. Once the code returns to no indentation, the code will\nrun seperately to the for loop only once it has completed.</li>\n</ul>\n<p>It's easiest to understand how loops work by looking through an example - and\nnow we have everything we need to make some cool pictures with Python; so let's\ntake a look!</p>\n<h2>Putting It All Together</h2>\n<p>The code used to make strange attractor images is fairly short - it's only a few\nlines! Let's work through it and see what we're doing. First, let's import the\nstuff we need.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sin<span class=\"token punctuation\">,</span> cos</code></pre></div>\n<p>Now let's set some initial values:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\na <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.1</span>\nb <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2</span>\nc <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.3</span>\nd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.4</span></code></pre></div>\n<p>These numbers are what changes the shape of our output - you can set this to\nwhatever you want!</p>\n<p>Now for the harder part - we're going to set up 2 lists to track our <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code>\nvalues.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\ny_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now we write a loop that calculates the new values of x and y, adds them to the\nlist, then overwrites the old values of x and y with the new ones. This is\nthe real magic of our code, so we'll go through it step by step!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_x <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> c <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n    new_y <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span>\n\n    x_list <span class=\"token operator\">=</span> x_list <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span>\n    y_list <span class=\"token operator\">=</span> y_list <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span>\n\n    x <span class=\"token operator\">=</span> new_x\n    y <span class=\"token operator\">=</span> new_y</code></pre></div>\n<p>So each loop, in the first two lines we calculate the new values of x and y, and\nstore them in the variables <code class=\"language-text\">new_x</code> and <code class=\"language-text\">new_y</code>.</p>\n<p>In the middle two lines, we add these new values to the list using a little\nshortcut with lists - if you add two lists together, it simply joins them; so\n<code class=\"language-text\">[1, 2, 3] + [4, 5, 6]  = [1, 2, 3, 4, 5, 6]</code>.</p>\n<p>In the final two lines, we overwrite the values of <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> with their new\nvalues, so that when the for loop runs again we'll be using these new values to\ncalculate the <em>new</em> new values!</p>\n<p>If you <code class=\"language-text\">print(x_list)</code> you'll see the list is now full with 100,000 numbers, and\nthe same with the <code class=\"language-text\">y_list</code>. Now to plot them!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x_list<span class=\"token punctuation\">,</span> y_list<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>These 3 lines are doing a lot under the hood, but we don't really need to worry\nabout that. The important parts are:</p>\n<ul>\n<li>We add the <code class=\"language-text\">alpha=0.1</code> input to scatter to make the points very transparent</li>\n<li>We add the <code class=\"language-text\">s=1</code> to make them small</li>\n<li>We add <code class=\"language-text\">c='black'</code> to make them black</li>\n<li><code class=\"language-text\">plt.axis('off')</code> hides the axes</li>\n</ul>\n<p>If you run all that code together, you'll find that you should get a cool\nlooking image!</p>\n<p>Try changing the initial values of <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> and the values of <code class=\"language-text\">a, b, c, d</code>\nand see what you get - very small changes in these numbers can result in very\nlarge changes in the final image, so play around with it!</p>\n<p>Also have a play with the colors and options for the plot - you'll find that you\ncan make some interesting looking images by setting the color to <code class=\"language-text\">range(100001)</code>\nfor example (the range has to be the same length as the number of points in the\nlists).</p>\n<p>In the next activity we'll look at some ways of improving our code by creating\nour own functions and types - making our lives easier when incorporating other\nalgorithms.</p>","frontmatter":{"date":"June 11, 2023","slug":"python-intro","title":"Introduction to the Python Language","summary":"Learn the foundations of the Python programming language!","featured":true,"author":"Sam Ball","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/73c1d51b43fbc521eb679bfe7fa58906/1e21a/landing.jpg","srcSet":"/static/73c1d51b43fbc521eb679bfe7fa58906/1bf32/landing.jpg 200w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/eee8e/landing.jpg 400w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/1e21a/landing.jpg 800w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/f6810/landing.jpg 1600w","sizes":"(min-width: 800px) 800px, 100vw"},"sources":[{"srcSet":"/static/73c1d51b43fbc521eb679bfe7fa58906/b6124/landing.webp 200w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/dff21/landing.webp 400w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/b2a35/landing.webp 800w,\n/static/73c1d51b43fbc521eb679bfe7fa58906/e9d78/landing.webp 1600w","type":"image/webp","sizes":"(min-width: 800px) 800px, 100vw"}]},"width":800,"height":450}}}}}},"pageContext":{"id":"cf52812b-cbc4-5cb9-8e71-577018104aa6","frontmatter__slug":"python-intro","__params":{"frontmatter__slug":"python-intro"}}},"staticQueryHashes":[],"slicesMap":{}}